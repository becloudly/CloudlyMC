name: üöÄ CloudlyMC Release Pipeline

on:
  push:
    branches: ["master"]
    paths:
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'gradle/**'
      - 'app/src/**'
      - '*.gradle.kts'

jobs:
  prepare-release:
    name: üì¶ Prepare Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      jar-name: ${{ steps.extract-version.outputs.jar-name }}
      release-name: ${{ steps.extract-version.outputs.release-name }}
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: ‚òï Setup Java Environment
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: üíæ Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: üîß Prepare Gradle
        run: chmod +x gradlew

      - name: üî® Build Plugin JAR
        run: ./gradlew clean shadowJar --no-daemon --build-cache
        env:
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs='-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError'"

      - name: üè∑Ô∏è Extract Version Information
        id: extract-version
        run: |
          echo "::group::Finding JAR and extracting version"
          JAR_FILE=$(ls -t build/libs/cloudly*.jar | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "‚ùå Error: No CloudlyMC JAR file found in build/libs/"
            exit 1
          fi
          
          JAR_NAME=$(basename "$JAR_FILE")
          VERSION=$(echo "$JAR_NAME" | sed 's/^cloudly-//' | sed 's/\.jar$//')
          
          echo "jar-file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release-name=CloudlyMC $VERSION" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Found JAR: $JAR_NAME"
          echo "‚úÖ Version: $VERSION"
          echo "::endgroup::"

      - name: üì§ Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloudly-plugin
          path: build/libs/cloudly*.jar
          retention-days: 7

  generate-changelog:
    name: üìù Generate Changelog
    needs: prepare-release
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.format-changelog.outputs.changelog }}
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: üîç Find Previous Release
        id: find-previous-release
        run: |
          echo "::group::Finding previous release tag"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "‚ÑπÔ∏è No previous release found - this is the first release"
            echo "first-release=true" >> $GITHUB_OUTPUT
            echo "previous-tag=" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Previous release: $PREVIOUS_TAG"
            echo "first-release=false" >> $GITHUB_OUTPUT
            echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: üìä Generate Changelog Content
        id: generate-changelog
        run: |
          echo "::group::Generating changelog"
          PREVIOUS_TAG="${{ steps.find-previous-release.outputs.previous-tag }}"
          IS_FIRST_RELEASE="${{ steps.find-previous-release.outputs.first-release }}"
          
          if [ "$IS_FIRST_RELEASE" = "true" ]; then
            echo "‚ÑπÔ∏è First release - including all commits"
            COMMITS=$(git log --pretty=format:"%h|%s|%an|%ad" --date=short)
          else
            echo "‚ÑπÔ∏è Generating changes since $PREVIOUS_TAG"
            COMMITS=$(git log --pretty=format:"%h|%s|%an|%ad" --date=short "$PREVIOUS_TAG..HEAD")
          fi
          
          # Initialize changelog sections
          FEATURES=""
          FIXES=""
          IMPROVEMENTS=""
          DOCS=""
          BREAKING=""
          OTHER=""
          
          # Process each commit
          while IFS='|' read -r hash subject author date; do
            [ -z "$hash" ] && continue
            
            # Map author to GitHub username if known
            case "$author" in
              "Gerrit Schlinkmann"|"gerrit")
                github_user="gerrxt07"
                ;;
              *)
                github_user="$author"
                ;;
            esac
            
            COMMIT_LINE="- $subject ([${hash}](https://github.com/${{ github.repository }}/commit/${hash})) - @${github_user} | ${date}"
            
            # Categorize commits
            if [[ "$subject" =~ ^(feat|feature|add|new): ]]; then
              FEATURES="$FEATURES$COMMIT_LINE"$'\n'
            elif [[ "$subject" =~ ^(fix|bugfix|patch): ]]; then
              FIXES="$FIXES$COMMIT_LINE"$'\n'
            elif [[ "$subject" =~ ^(improve|enhancement|optimize|perf): ]]; then
              IMPROVEMENTS="$IMPROVEMENTS$COMMIT_LINE"$'\n'
            elif [[ "$subject" =~ ^(docs): ]]; then
              DOCS="$DOCS$COMMIT_LINE"$'\n'
            elif [[ "$subject" =~ ^(breaking|BREAKING CHANGE|break): ]]; then
              BREAKING="$BREAKING$COMMIT_LINE"$'\n'
            else
              OTHER="$OTHER$COMMIT_LINE"$'\n'
            fi
          done <<< "$COMMITS"
          
          # Save sections to files for the next step
          echo "$BREAKING" > breaking.txt
          echo "$FEATURES" > features.txt
          echo "$FIXES" > fixes.txt
          echo "$IMPROVEMENTS" > improvements.txt
          echo "$DOCS" > docs.txt
          echo "$OTHER" > other.txt
          echo "::endgroup::"

      - name: üé® Format Changelog
        id: format-changelog
        run: |
          echo "::group::Formatting changelog"
          VERSION="${{ needs.prepare-release.outputs.version }}"
          CHANGELOG=""
          
          # Add header
          CHANGELOG="# CloudlyMC $VERSION Release"$'\n\n'
          
          # Add release date
          RELEASE_DATE=$(date +"%Y-%m-%d")
          CHANGELOG="$CHANGELOG**Release Date:** $RELEASE_DATE"$'\n\n'
          
          # Add download information
          CHANGELOG="$CHANGELOG## üì• Installation"$'\n\n'
          CHANGELOG="$CHANGELOG- Download the plugin JAR from the assets below"$'\n'
          CHANGELOG="$CHANGELOG- Place it in your server's plugins folder"$'\n'
          CHANGELOG="$CHANGELOG- Restart your server"$'\n\n'
          
          # Add changelog sections - only include non-empty sections
           if [ -s breaking.txt ] && [ "$(cat breaking.txt | tr -d '\n\r\t ')" != "" ]; then
             CHANGELOG="$CHANGELOG## üö® Breaking Changes"$'\n\n'
             CHANGELOG="$CHANGELOG$(cat breaking.txt)"$'\n\n'
           fi
           
           if [ -s features.txt ] && [ "$(cat features.txt | tr -d '\n\r\t ')" != "" ]; then
             CHANGELOG="$CHANGELOG## ‚ú® New Features"$'\n\n'
             CHANGELOG="$CHANGELOG$(cat features.txt)"$'\n\n'
           fi
           
           if [ -s fixes.txt ] && [ "$(cat fixes.txt | tr -d '\n\r\t ')" != "" ]; then
             CHANGELOG="$CHANGELOG## üêõ Bug Fixes"$'\n\n'
             CHANGELOG="$CHANGELOG$(cat fixes.txt)"$'\n\n'
           fi
           
           if [ -s improvements.txt ] && [ "$(cat improvements.txt | tr -d '\n\r\t ')" != "" ]; then
             CHANGELOG="$CHANGELOG## üöÄ Improvements"$'\n\n'
             CHANGELOG="$CHANGELOG$(cat improvements.txt)"$'\n\n'
           fi
           
           if [ -s docs.txt ] && [ "$(cat docs.txt | tr -d '\n\r\t ')" != "" ]; then
             CHANGELOG="$CHANGELOG## üìö Documentation"$'\n\n'
             CHANGELOG="$CHANGELOG$(cat docs.txt)"$'\n\n'
           fi
           
           if [ -s other.txt ] && [ "$(cat other.txt | tr -d '\n\r\t ')" != "" ]; then
             CHANGELOG="$CHANGELOG## üîÑ Other Changes"$'\n\n'
             CHANGELOG="$CHANGELOG$(cat other.txt)"$'\n\n'
           fi
          
          # Add footer
          CHANGELOG="$CHANGELOG## üíñ Thank You"$'\n\n'
          CHANGELOG="$CHANGELOG**Thank you for using CloudlyMC!** If you encounter any issues or have suggestions, please open an issue on GitHub."
          
          # Save changelog to file and output
          echo "$CHANGELOG" > changelog.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  publish-release:
    name: üåü Publish Release
    needs: [prepare-release, generate-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: üì• Download Build Artifact
        uses: actions/download-artifact@v5
        with:
          name: cloudly-plugin
          path: ./artifacts
      
      - name: üì¶ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.prepare-release.outputs.release-name }}
          tag_name: v${{ needs.prepare-release.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          files: ./artifacts/cloudly*.jar
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version, 'alpha') || contains(needs.prepare-release.outputs.version, 'beta') || contains(needs.prepare-release.outputs.version, 'rc') }}
          generate_release_notes: false
          
      - name: üì¢ Post-Release Notification
        run: |
          echo "::group::Release Published"
          echo "‚úÖ Release v${{ needs.prepare-release.outputs.version }} published successfully!"
          echo "‚úÖ JAR: ${{ needs.prepare-release.outputs.jar-name }}"
          echo "::endgroup::"
